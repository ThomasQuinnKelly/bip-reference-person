<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

    <parent>
		<groupId>gov.va.ocp.reference.person</groupId>
		<artifactId>ocp-reference-reactor</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>
	
<!-- 	<groupId>gov.va.ocp.vetservices.claims</groupId> -->
	<artifactId>ocp-vetservices-claims</artifactId>
	<name>ocp-vetservices-claims</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

    	<dependency>
            <groupId>gov.va.ocp.framework</groupId>
            <artifactId>ocp-framework-libraries</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
		 <dependency>
            <groupId>gov.va.ocp.reference.person</groupId>
            <artifactId>ocp-reference-partner-person</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>gov.va.ocp.framework</groupId>
            <artifactId>ocp-framework-autoconfigure</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
    	<!-- spring-boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-configuration-processor</artifactId>
        	<optional>true</optional>
        </dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- spring cloud dependencies -->
        <!-- Spring-cloud Netflix Feign dependency for defining declarative REST clients -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!-- Spring-cloud Netflix hystrix dependency for circuit breaker implementation -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-starter-sleuth</artifactId>
	   </dependency>		   
	   <dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
	   </dependency>
	   <dependency>
		   <groupId>org.springframework.retry</groupId>
		   <artifactId>spring-retry</artifactId>
	   </dependency>
		<dependency> 
	       <groupId>org.springframework.cloud</groupId>
	       <artifactId>spring-cloud-vault-config-consul</artifactId>
	   </dependency>
   		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-config</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-consul-all</artifactId>
            <exclusions>
            	<!-- Module spring-cloud-netflix-core is deprecated as of 2.1.0, use spring-cloud-netflix-hystrix instead. -->
				<exclusion>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-netflix-core</artifactId>
				</exclusion>
			</exclusions>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.codehaus.janino/janino -->
		<dependency>
		    <groupId>org.codehaus.janino</groupId>
		    <artifactId>janino</artifactId>
		</dependency>
        <!-- additional jackson dependencies not brought in via spring-boot starters -->
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-base</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-jaxb-annotations</artifactId>
        </dependency>
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-annotations</artifactId>
		</dependency>
        
        <!-- jolokia for JMX over HTTP via /jolokia -->
        <dependency>
		    <groupId>org.jolokia</groupId>
		    <artifactId>jolokia-core</artifactId>
		</dependency>
		
        <!-- misc dependencies -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        
        <!-- test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>

	</dependencies>

    <build>
    	<plugins>
    		 <plugin>

				<!-- 
				 * Meta-information about the web application.<br/><br/>
				 * 
				 * The templating maven plugin handles generating and copying files from a source to a given output directory, while filtering them. 
				 * This plugin is useful to filter Java Source Code as there is a need to have things in the code replaced with properties values.
				 * Generates class to store project.* properties in the ApplicationInfo.java placed under <sourceDirectory>
				 * This mojo helps adding a filtered source folder in one go. This is useful as we want to use properties coming from the POM inside 
				 * parts of our source code that requires real constants
				 *
				 * @see ApplicationInfo.java in src/java-template directory
			    -->
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>templating-maven-plugin</artifactId>
			    <version>${templating-maven-plugin.version}</version>
			    <executions>
			        <execution>
			            <id>filtering-java-templates</id>
			            <goals>
			                <goal>filter-sources</goal>
			            </goals>
			            <configuration>
			             <sourceDirectory>${basedir}/src/main/java-template</sourceDirectory>
			          		<outputDirectory>${project.build.directory}/generated-sources/java-template</outputDirectory>
			          	</configuration>
			        </execution>
			    </executions>
			</plugin>
			<plugin>
				<!-- Generate the source java file described by the templating-maven-plugin above -->
			      <groupId>org.codehaus.mojo</groupId>
			      <artifactId>build-helper-maven-plugin</artifactId>
			      <executions>
			          <execution>
			              <id>add-source</id>
			              <phase>generate-sources</phase>
			              <goals>
			                  <goal>add-source</goal>
			              </goals>
			              <configuration>
			                  <sources>
			                      <source>${project.build.directory}/generated-sources/java-template</source>
			                  </sources>
			              </configuration>
			          </execution>
			      </executions>
			  </plugin>
    	</plugins>
    </build>

</project>
