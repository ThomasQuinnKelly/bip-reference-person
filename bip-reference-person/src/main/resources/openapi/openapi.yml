# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md
openapi: 3.0.1
info:
   version: 0.0.2-SNAPSHOT
   title: BIP Reference Person Spring Boot Example Service
   description: Reference Person Example Service API to demonstrate implementation of spring boot and cloud enabled microservice on BIP Platform. Documentation is generated using OpenAPI Specification version 3.0. 
   termsOfService: https://developer.va.gov/terms-of-service
   license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
tags:
  - name: reference-person
    description: Reference Person Resource
  - name: person-rest-client-tester
    description: Person Rest Client Tester
  - name: token-resource
    description: Token Resource
paths:

  "/api/v1/persons/pid":
    post:
      tags:
      - reference-person
      summary: Retrieve person information by PID from mocked reference partner person service.
      description: Will return a person info object based on search by PID.
      operationId: personByPid
      requestBody: 
        description: personInfoRequest
        required: true
        content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoResponse'
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  "/api/v1/persons/{pid}/documents":
    post:
      parameters:
        - name : pid
          in : path
          description : participant id
          required : true
          schema:
            type: integer
            format: int64
            example: 6666345
            description: The Participant ID of the person for whom to retrieve data
            minimum: 1
            exclusiveMinimum: false
      tags:
        - reference-person
      summary: Upload document for the PID using Multipart form data and store it in the configured / in-memory database.
      description: Will upload a document based on the PID.
      operationId: upload
      requestBody: 
        description: byteFile and meta-data
        required: true
        content: 
          multipart/form-data: # Media type
            schema:            # Request payload
              type: object
              required: 
                - docName
                - file
              properties:      # Request parts
                docName: # Part 1 (document name)
                  type: string
                  description : The name of the document
                docCreateDate:  # Part 2 (the document creation date)
                  type: string
                  description : The date of creation of the document in YYYY-MM-DD format
                  pattern: 'YYYY-MM-DD'
                  example: 2019-08-09
                file:  # Part 3 (the document to be uploaded)
                  type: string
                  description : The document to be uploaded
                  format: binary     
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonDocsMetadataUploadResponse'
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  "/api/v1/persons/{pid}/documents/metadata":
    get:
      parameters:
          - name : pid
            in : path
            description : participant id
            required : true
            schema:
              type: integer
              format: int64
              example: 6666345
              description: The Participant ID of the person for whom to retrieve data
              minimum: 1
              exclusiveMinimum: false
      tags:
        - reference-person
      summary: Get metadata about the document uploaded for a pid, that is stored in the database
      description: Demonstrate retrieval of data from a database
      operationId: getDocumentMetadataForPerson
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonDocsMetadataResponse'
        '400':
          '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  "/api/v1/persons/documents/sample":
    get:
      tags:
        - reference-person
      summary: Download the sample reference document 
      description: Will download a document that is stored statically in the application, to demonstrate document downloads
      operationId: downloadSampleDocument
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  "/api/v1/persons/clientTests/callPersonByPidUsingFeignClient":
    post:
      tags:
      - person-rest-client-tester
      summary: An endpoint which uses a REST client using Feign to call the remote
        person by pid operation.
      operationId: callPersonByPidUsingFeignClientUsingPOST
      requestBody:
          description: personInfoRequest
          required: true
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoResponse'
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  "/api/v1/persons/clientTests/callPersonByPidUsingRestTemplate":
    post:
      tags:
      - person-rest-client-tester
      summary: An endpoint which uses a REST client using RestTemplate to call the
        remote echo operation.
      operationId: callPersonByPidUsingRestTemplateUsingPOST
      requestBody:
        description: personInfoRequest
        required: true
        content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/PersonInfoResponse'
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  ## SNS Message Example
  "/api/v1/sns/publishMessage":
    post:
      tags:
        - reference-person-aws
      summary: Publish a SNS message
      description: Will publish a message to an SNS topic
      operationId: publishMessage
      requestBody:
        description: A message
        required: true
        content:
          text/plain:
            schema:
              type: string
              required:
                - message
              properties:
                message:
                  type: string
                  description: The message playload
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BipPublishResult'
        '400':
          '$ref': '#/components/responses/400'
        '401':
          '$ref': '#/components/responses/401'
        '403':
          '$ref': '#/components/responses/403'
        '500':
          '$ref': '#/components/responses/500'
      security:
        - bearerAuth: []
      deprecated: false

  # The token path should not require any changes
  "/api/v1/token":
    post:
      tags:
      - token-resource
      summary: Get JWT Token
      description: Get a JWT bearer token with 'person' data. Include MVI correlationIds
        if required by the target API.
      operationId: getTokenUsingPOST
      requestBody: 
        description: |-
          'Identity information for the authenticated user. CorrelationIds may be null or an empty array if the target API does not require it. 
          Otherwise, correlationIds must be the list as retrieved from MVI:
          <table style=\"table-layout:auto;width:700px;text-align:left;background-color:#efefef;\"><tr><th>Common ID Name</th><th>Example ID</th><th>Type</th><th>Source</th>
          <th>Issuer</th><th>Status</th><th </tr><tr><td>Participant ID (PID)</td><td>12345678</td><td>PI</td><td>200CORP</td><td>USVBA</td><td>A</td></tr>
          <tr><td>File Number</td><td>123456789</td><td>PI</td><td>200BRLS</td><td>USVBA</td><td>A</td></tr>
          <tr><td>ICN</td><td>1234567890V123456</td><td>NI</td><td>200M</td><td>USVHA</td><td>A</td></tr><tr><td>EDIPI / PNID</td><td>1234567890</td><td>NI</td><td>200DOD</td><td>USDOD</td><td>A</td></tr>
          <tr><td>SSN</td><td>123456789</td><td>SS</td><td></td><td></td><td></td></tr></table>'
        required: true
        content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Person'
      responses:
        '200':
          description: A Response which indicates a successful Request.  The Response
            may contain "messages" that could describe warnings or further information.
          content:
            text/plain:
              schema:
                type: string
        '400':
           '$ref': '#/components/responses/400'
        '401':
           '$ref': '#/components/responses/401'
        '403':
           '$ref': '#/components/responses/403'
        '500':
           '$ref': '#/components/responses/500'
      deprecated: false

components:
  # securitySchemes are defined by the framework.
  # Service applications must configure as below.
  securitySchemes:
    Authorization:
      type: apiKey
      name: Authorization
      in: header
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
  schemas:
    # Define API (provider) model objects. Use type, format and example;
    # use standard JSR303 constraints (required, min, max, etc) where it makes sense
    PersonInfo:
      type: object
      title: PersonInfo
      description: Model for data contained in the response from the Person Service
      properties:
        fileNumber:
          type: string
          example: 912444689
          description: The persons file number
        firstName:
          type: string
          example: JANE
          description: The persons first name
        lastName:
          type: string
          example: DOE
          description: The persons last name
        middleName:
          type: string
          example: M
          description: The persons middle name
        participantId:
          type: integer
          format: int64
          example: 6666345
          minimum: 1
          description: The persons participant ID
        socSecNo:
          type: string
          example: 912444689
          description: The persons SSN
    PersonDocsMetadata:
      type: object
      title: PersonDocsMetadata
      description: Model for document metadata associated with a person contained in the response from the Person Service
      properties:
        docName:
           type: string
           example: samplePersonDocument.txt
           description : The name of the document
        docCreateDate:
           type: string
           description : The date of creation of the document in YYYY-MM-DD format
           pattern: 'YYYY-MM-DD'
           example: 2019-08-09
    PersonInfoRequest:
      title: PersonInfoRequest
      description: Model for data to request person information from the Person Service
      allOf:
        - '$ref': '#/components/schemas/ProviderRequest'
        - type: object
          properties:
            participantID:
              type: integer
              format: int64
              example: 6666345
              description: The Participant ID of the person for whom to retrieve data
              minimum: 1
              exclusiveMinimum: false
          required:
            - participantID
    PersonInfoResponse:
      title: PersonInfoResponse
      description: Model for the response from the Person Service
      allOf:
       - '$ref': '#/components/schemas/ProviderResponse'
       - type: object
         # all other properties specific to PersonInfoResponse
         properties:
            personInfo:
              description: The object representing the person information
              '$ref': '#/components/schemas/PersonInfo'
    PersonDocsMetadataResponse:
      title: PersonDocsMetadataResponse
      description: Model for holding metadata sent along with an uploaded document
      allOf:
       - '$ref': '#/components/schemas/ProviderResponse'
       - type: object
         # all other properties specific to PersonDocsMetadataResponse
         properties:
           PersonDocsMetadata:
             description: The object representing the document metadata information associated with a person
             '$ref': '#/components/schemas/PersonDocsMetadata'
    PersonDocsMetadataUploadResponse: 
    # Create a wrapper model to avoid having multiple message objects being added to the example response object in the swagger documentation (a possible bug in open-api/swagger?)
      title: PersonDocsMetadataUploadResponse
      description: Model for holding metadata sent along with an uploaded document
      allOf:
       - '$ref': '#/components/schemas/ProviderResponse'
       - type: object
    JmsResponse:
      type: object
      title: JmsResponse
      description: Model for jms Response
      properties:
        jmsId:
          type: string
          example: 5bd06d77-7706-4675-a6d8-39e01c2fba61
          description : jms id
    BipPublishResult:
      type: object
      title: BipPublishResult
      description: Result model for publishing SNS messages
      properties:
        messageId:
          type: string
          example: This is the OpenAPI file message ID
          description: The returned Message ID
    # Schema objects below are from BIP Framework to be declared.
    # These objects need to be mapped in <importMappings> section
    # of openapi-generator-maven-plugin so that no code is generated 
    # for these classes
    Message:
      type: object
      title: Message
      description: Model that identifies a single individual used in the security context
      required:
      - key
      - severity
      properties:
        key:
          # possible values enumerated by gov.va.bip.framework.messages.MessageKeys
          type: string
        severity:
          # derived from gov.va.bip.framework.messages.MessageSeverity
          type: string 
          enum:
            - INFO
            - WARN
            - ERROR
        status:
          type: integer
          format: int32
        text:
          type: string
        timestamp:
          type: string
          format: date-time
          example: yyyy-MM-dd'T'HH:mm:ss.SSS
    Person:
      type: object
      title: Person
      description: Model that identifies a single individual used in the security context
      properties:
        applicationID:
          type: string
          example: ShareUI
          description: The application taking the last action on the record
        appToken:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
          description: The application's custom token passed as any String from consumers to the API services
        assuranceLevel:
          type: integer
          format: int32
          example: 2
          minimum: 0
          description: The person's access assurance level
        birthDate:
          type: string
          format: date
          example: '1978-05-20'
          description: The person's birth date
        correlationIds:
          type: array
          example:
          - 77779102^NI^200M^USVHA^P
          - 912444689^PI^200BRLS^USVBA^A
          - 6666345^PI^200CORP^USVBA^A
          - 1105051936^NI^200DOD^USDOD^A
          - 912444689^SS
          description: The MVI correlation IDs list for the person
          items:
            type: string
        email:
          type: string
          example: jane.doe@va.gov
          description: The person's email address
        firstName:
          type: string
          example: JANE
          description: The person's first name
        gender:
          type: string
          example: FEMALE
          description: The person's gender
        lastName:
          type: string
          example: DOE
          description: The person's last name
        middleName:
          type: string
          example: M
          description: The person's middle name
        prefix:
          type: string
          example: Ms
          description: The prefix for the person's full name
        stationID:
          type: string
          example: 310
          description: The number representing the Regional Office of the person taking the last action on the record
        suffix:
          type: string
          example: S
          description: The suffix for the person's full name
        userID:
          type: string
          example: vhaislXXXXX
          description: The name associated with the person taking the last action on the record
    ProviderResponse: 
      type: object
      properties:
        messages:
          type: array
          items:
            '$ref': '#/components/schemas/Message'
      title: ProviderResponse
    ProviderRequest: 
      type: object
      title: ProviderRequest
  responses:
    400:
      description: There was an error encountered processing the Request.  Response
        will contain a  "messages" element that will provide further information
        on the error.  This request shouldn't be retried until corrected.
      content:
        application/problem+json:
          schema:
            '$ref': '#/components/schemas/ProviderResponse'
          example:
              messages: 
                - key: bip.framework.global.validator.method.argument.not.valid
                  severity: ERROR 
                  status: 400 
                  text: Argument not valid.
                  timestamp: 2019-08-29T18:40:22.766Z
    401:
      description: The authentication mechanism failed and hence access is forbidden.
      content:
        application/problem+json:
          schema:
            '$ref': '#/components/schemas/ProviderResponse'
          example:
              messages: 
                - key: UNAUTHORIZED
                  severity: ERROR 
                  status: 401 
                  text: No JWT Token in Header.
                  timestamp: 2019-08-29T18:40:22.766Z
    403:
      description: The request is not authorized.  Please verify credentials used
        in the request.
      content:
        application/problem+json:
          schema:
            '$ref': '#/components/schemas/ProviderResponse'
          example:
              messages: 
                - key: bip.framework.not.authorized.exception
                  severity: ERROR 
                  status: 403 
                  text: Access denied.
                  timestamp: 2019-08-29T18:40:22.766Z
    500:
      description: There was an error encountered processing the Request.  Response
            will contain a  "messages" element that will provide further information
            on the error.  Please retry.  If problem persists, please contact support
            with a copy of the Response.
      content:
        application/problem+json:
          schema:
            '$ref': '#/components/schemas/ProviderResponse'
          example:
              messages: 
                - key: bip.framework.global.general.exception
                  severity: ERROR 
                  status: 500 
                  text: Unexpected exception.
                  timestamp: 2019-08-29T18:40:22.766Z
